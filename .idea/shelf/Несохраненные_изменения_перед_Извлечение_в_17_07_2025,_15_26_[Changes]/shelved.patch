Index: seeding/ui_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from PyQt5.QtWidgets import (\r\n    QMainWindow,\r\n    QWidget,\r\n    QVBoxLayout,\r\n    QHBoxLayout,\r\n    QLabel,\r\n    QToolBar,\r\n    QAction,\r\n    QFileDialog,\r\n    QMenuBar,\r\n    QGroupBox,\r\n    QScrollArea,\r\n)\r\nfrom PyQt5.QtGui import QIcon, QPixmap, QImage\r\nfrom PyQt5.QtCore import Qt, QPoint\r\nfrom .models.data_models import OriginalImage, ObjectImage\nfrom .tree_widget_example import TreeWidgetExample\nimport numpy as np\r\nimport cv2\r\nimport fitz\r\nfrom ultralytics import YOLO\r\n\r\n\r\nclass DraggableScrollArea(QScrollArea):\r\n    \"\"\"\r\n    ScrollArea c возможностью перетаскивания средней кнопкой мыши.\r\n    \"\"\"\r\n\r\n    def __init__(self, parent=None):\r\n        super().__init__(parent)\r\n        self._drag_active = False\r\n        self._drag_start_pos = QPoint()\r\n        self._scroll_start_pos = QPoint()\r\n\r\n    def mousePressEvent(self, event):\r\n        if event.button() == Qt.MiddleButton:\r\n            self._drag_active = True\r\n            self.setCursor(Qt.ClosedHandCursor)\r\n            self._drag_start_pos = event.pos()\r\n            self._scroll_start_pos = QPoint(\r\n                self.horizontalScrollBar().value(), self.verticalScrollBar().value()\r\n            )\r\n        else:\r\n            super().mousePressEvent(event)\r\n\r\n    def mouseMoveEvent(self, event):\r\n        if self._drag_active:\r\n            delta = event.pos() - self._drag_start_pos\r\n            self.horizontalScrollBar().setValue(self._scroll_start_pos.x() - delta.x())\r\n            self.verticalScrollBar().setValue(self._scroll_start_pos.y() - delta.y())\r\n        else:\r\n            super().mouseMoveEvent(event)\r\n\r\n    def mouseReleaseEvent(self, event):\r\n        if event.button() == Qt.MiddleButton:\r\n            self._drag_active = False\r\n            self.setCursor(Qt.ArrowCursor)\r\n        else:\r\n            super().mouseReleaseEvent(event)\r\n\r\n\r\ndef simple_nms(boxes, scores, iou_threshold=0.4):\r\n    \"\"\"\r\n    Простая реализация NMS (non-maximum suppression) на numpy.\r\n    boxes - список bbox: [x1, y1, x2, y2]\r\n    scores - список confidence\r\n    Возвращает индексы выбранных боксов.\r\n    \"\"\"\r\n    if len(boxes) == 0:\r\n        print(\"simple_nms: пустой список боксов\")\r\n        return []\r\n\r\n    boxes = np.array(boxes)\r\n    scores = np.array(scores)\r\n\r\n    x1 = boxes[:, 0]\r\n    y1 = boxes[:, 1]\r\n    x2 = boxes[:, 2]\r\n    y2 = boxes[:, 3]\r\n\r\n    areas = (x2 - x1) * (y2 - y1)\r\n    order = scores.argsort()[::-1]\r\n\r\n    keep = []\r\n    while order.size > 0:\r\n        i = order[0]\r\n        keep.append(i)\r\n\r\n        xx1 = np.maximum(x1[i], x1[order[1:]])\r\n        yy1 = np.maximum(y1[i], y1[order[1:]])\r\n        xx2 = np.minimum(x2[i], x2[order[1:]])\r\n        yy2 = np.minimum(y2[i], y2[order[1:]])\r\n\r\n        w = np.maximum(0, xx2 - xx1)\r\n        h = np.maximum(0, yy2 - yy1)\r\n        inter = w * h\r\n\r\n        iou = inter / (areas[i] + areas[order[1:]] - inter)\r\n\r\n        inds = np.where(iou <= iou_threshold)[0]\r\n        order = order[inds + 1]\r\n\r\n    print(f\"simple_nms: после NMS осталось {len(keep)} боксов\")\r\n    return keep\r\n\r\n\r\nclass ImageEditor(QMainWindow):\r\n    \"\"\"\r\n    Главное окно приложения для работы с изображениями и PDF.\r\n\r\n    Позволяет загружать файлы, управлять слоями и искать сеянцы при помощи YOLOv8.\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setWindowTitle(\"Современный UI для работы с изображениями\")\r\n        self.setGeometry(100, 100, 1200, 800)\r\n        self.zoom_factor = 1.0\r\n        self.image_storage = OriginalImage()\r\n        self.model = YOLO(\r\n            \"E:/_JOB_/_Python/pythonProject/results/exp_yolov8_custom_best11/weights/best.pt\"\r\n        )\r\n\r\n        self.init_ui()\r\n\r\n    def init_ui(self):\r\n        self.create_menu()\r\n        self.create_toolbars()\r\n        self.create_central_widget()\r\n        self.create_right_panel()\r\n\r\n    def create_menu(self):\r\n        menu_bar = self.menuBar()\r\n        file_menu = menu_bar.addMenu(\"Файл\")\r\n        open_action = QAction(\"Открыть файл\", self)\r\n        open_action.triggered.connect(self.open_image)\r\n        file_menu.addAction(open_action)\r\n\r\n    def create_toolbars(self):\r\n        toolbar = QToolBar(\"Toolbar\", self)\r\n        toolbar.setOrientation(Qt.Vertical)\r\n        toolbar.setMovable(False)\r\n        toolbar.setFixedWidth(150)\r\n        self.addToolBar(Qt.LeftToolBarArea, toolbar)\r\n\r\n        self.mask_action = QAction(QIcon(), \"Создать маску\", self)\r\n        self.mask_action.triggered.connect(self.create_mask)\r\n        toolbar.addAction(self.mask_action)\r\n\r\n        self.seedlings_action = QAction(QIcon(), \"Найти сеянцы\", self)\r\n        self.seedlings_action.triggered.connect(self.find_seedlings)\r\n        toolbar.addAction(self.seedlings_action)\r\n\r\n        self.find_all_seedlings_action = QAction(QIcon(), \"Найти все сеянцы\", self)\r\n        self.find_all_seedlings_action.triggered.connect(self.find_all_seedlings)\r\n        toolbar.addAction(self.find_all_seedlings_action)\r\n\r\n        self.classify_action = QAction(QIcon(), \"Классификация\", self)\r\n        self.classify_action.triggered.connect(self.classify)\r\n        toolbar.addAction(self.classify_action)\r\n\r\n        self.rotate_action = QAction(QIcon(), \"Повернуть на 90°\", self)\r\n        self.rotate_action.triggered.connect(self.rotate_image)\r\n        toolbar.addAction(self.rotate_action)\r\n\r\n        toolbar.addSeparator()\r\n\r\n        self.report_action = QAction(QIcon(), \"Создать отчет\", self)\r\n        self.report_action.triggered.connect(self.create_report)\r\n        toolbar.addAction(self.report_action)\r\n\r\n        toolbar.addSeparator()\r\n\r\n        self.zoom_in_action = QAction(\"Приблизить\", self)\r\n        self.zoom_in_action.triggered.connect(self.zoom_in)\r\n        toolbar.addAction(self.zoom_in_action)\r\n\r\n        self.zoom_out_action = QAction(\"Отдалить\", self)\r\n        self.zoom_out_action.triggered.connect(self.zoom_out)\r\n        toolbar.addAction(self.zoom_out_action)\r\n\r\n        self.fit_action = QAction(\"Вписать\", self)\r\n        self.fit_action.triggered.connect(self.fit_to_window)\r\n        toolbar.addAction(self.fit_action)\r\n\r\n    def create_central_widget(self):\r\n        self.scroll_area = DraggableScrollArea()\r\n        self.scroll_area.setWidgetResizable(True)\r\n\r\n        self.central_widget = QWidget()\r\n        self.setCentralWidget(self.central_widget)\r\n        self.main_layout = QHBoxLayout(self.central_widget)\r\n\r\n        self.image_label = QLabel(\"Тут будет изображение\")\r\n        self.image_label.setAlignment(Qt.AlignCenter)\r\n        self.image_label.setStyleSheet(\"border: 1px dashed gray;\")\r\n\r\n        self.scroll_area.setWidget(self.image_label)\r\n        self.main_layout.addWidget(self.scroll_area, 2)\r\n\r\n    def create_right_panel(self):\r\n        self.right_panel = QGroupBox(\"Слои\")\r\n        layout = QVBoxLayout()\r\n        self.tree_widget = TreeWidgetExample()\r\n        layout.addWidget(self.tree_widget)\r\n\r\n        scroll_area = QScrollArea()\r\n        scroll_area.setWidget(self.tree_widget)\r\n        scroll_area.setWidgetResizable(True)\r\n        layout.addWidget(scroll_area)\r\n\r\n        self.tree_widget.itemClicked.connect(self.on_tree_item_clicked)\r\n\r\n        self.right_panel.setLayout(layout)\r\n        self.main_layout.addWidget(self.right_panel, 1)\r\n\r\n    def on_tree_item_clicked(self, item, column):\r\n        item_data = item.data(0, Qt.UserRole)\r\n        if item_data:\r\n            if item_data[\"type\"] in (\"original\", \"pdf\"):\r\n                idx = item_data[\"index\"]\r\n                self._active_image_index = idx\r\n                self.display_image_with_boxes(idx)\r\n            elif item_data[\"type\"] == \"seeding\":\r\n                parent_idx = item_data[\"parent_index\"]\r\n                seed_idx = item_data[\"index\"]\r\n                crop = self.image_storage.class_object_image[parent_idx][\r\n                    seed_idx\r\n                ].image[0]\r\n                self._active_image_index = parent_idx\r\n                self.display_image(crop)\r\n            else:\r\n                return\r\n\r\n    def open_image(self):\r\n        self.image_storage = OriginalImage()\r\n        file_name, _ = QFileDialog.getOpenFileName(\r\n            self,\r\n            \"Открыть изображение или PDF\",\r\n            \"\",\r\n            \"Images (*.png *.jpg *.jpeg *.bmp);;PDF Files (*.pdf);;All Files (*)\",\r\n        )\r\n        if file_name:\r\n            self.image_storage.file_path = file_name\r\n            self.image_storage.images.clear()\r\n            self.tree_widget.clear()\r\n\r\n            if file_name.lower().endswith(\".pdf\"):\r\n                self.load_pdf(file_name)\r\n            else:\r\n                image = self.load_image(file_name)\r\n                if image is not None:\r\n                    self.image_storage.images.append(image)\r\n\r\n            # Обязательно инициализируем пустые списки для найденных объектов\r\n            self.image_storage.class_object_image = [\r\n                [] for _ in range(len(self.image_storage.images))\r\n            ]\r\n\r\n    def load_image(self, file_name):\r\n        try:\r\n            image = cv2.imread(file_name)\r\n            return image\r\n        except Exception as e:\r\n            print(\"Ошибка при загрузке изображения:\", e)\r\n            return None\r\n\r\n    def load_pdf(self, pdf_path):\r\n        try:\r\n            doc = fitz.open(pdf_path)\r\n            for page_num in range(doc.page_count):\r\n                page = doc.load_page(page_num)\r\n                mat = fitz.Matrix(4, 4)  # 2x масштаб\r\n                pix = page.get_pixmap(matrix=mat)\r\n                img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(\r\n                    pix.height, pix.width, pix.n\r\n                )\r\n                if pix.n == 4:\r\n                    img = img[:, :, :3].copy()\r\n                img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\r\n                self.image_storage.images.append(img)\r\n                # Для первой страницы — показать в QLabel\r\n                if page_num == 0:\r\n                    self.display_image(img)\r\n                # Добавить в дерево\r\n                self.tree_widget.add_root_item(\r\n                    f\"Стр. {page_num + 1}\", \"Страница PDF\", page_num, \"pdf\", img\r\n                )\r\n            doc.close()\r\n\r\n            # Инициализация class_object_image для всех страниц\r\n            self.image_storage.class_object_image = [\r\n                [] for _ in range(len(self.image_storage.images))\r\n            ]\r\n\r\n        except Exception as e:\r\n            print(\"Ошибка при загрузке PDF:\", e)\r\n\r\n    def display_image(self, image):\r\n        if image is None or not isinstance(image, np.ndarray):\r\n            return\r\n        height, width = image.shape[:2]\r\n        if height == 0 or width == 0:\r\n            return\r\n\r\n        if len(image.shape) == 3 and image.shape[2] == 3:\r\n            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\r\n            bytes_per_line = 3 * width\r\n            qformat = QImage.Format_RGB888\r\n        elif len(image.shape) == 2:\r\n            image_rgb = image\r\n            bytes_per_line = width\r\n            qformat = QImage.Format_Grayscale8\r\n        else:\r\n            return\r\n\r\n        image_rgb = np.ascontiguousarray(image_rgb)\r\n        q_image = QImage(image_rgb.data, width, height, bytes_per_line, qformat)\r\n        self._original_image = image\r\n        self._original_pixmap = QPixmap.fromImage(q_image)\r\n\r\n        scroll_size = self.scroll_area.viewport().size()\r\n        ratio_w = scroll_size.width() / self._original_pixmap.width()\r\n        ratio_h = scroll_size.height() / self._original_pixmap.height()\r\n        self.min_fit_zoom = min(ratio_w, ratio_h, 1.0)\r\n        self.zoom_factor = self.min_fit_zoom\r\n        self.update_image_zoom()\r\n\r\n    def zoom_in(self):\r\n        self.zoom_factor *= 1.25\r\n        self.update_image_zoom()\r\n\r\n    def zoom_out(self):\r\n        self.zoom_factor /= 1.25\r\n        if self.zoom_factor < self.min_fit_zoom:\r\n            self.zoom_factor = self.min_fit_zoom\r\n        self.update_image_zoom()\r\n\r\n    def fit_to_window(self):\r\n        self.zoom_factor = self.min_fit_zoom\r\n        self.update_image_zoom()\r\n\r\n    def update_image_zoom(self):\r\n        if hasattr(self, \"_original_pixmap\"):\r\n            pixmap = self._original_pixmap\r\n            new_width = max(1, int(pixmap.width() * self.zoom_factor))\r\n            new_height = max(1, int(pixmap.height() * self.zoom_factor))\r\n            scaled_pixmap = pixmap.scaled(\r\n                new_width, new_height, Qt.KeepAspectRatio, Qt.SmoothTransformation\r\n            )\r\n            self.image_label.setPixmap(scaled_pixmap)\r\n            self.image_label.adjustSize()\r\n\r\n    def rotate_image(self):\r\n        selected_item = self.tree_widget.currentItem()\r\n        if selected_item is None:\r\n            print(\"rotate_image: Нет выбранного элемента в дереве\")\r\n            return\r\n\r\n        item_data = selected_item.data(0, Qt.UserRole)\r\n        if not item_data:\r\n            print(\"rotate_image: Нет данных для выбранного элемента\")\r\n            return\r\n\r\n        if item_data[\"type\"] in (\"original\", \"pdf\"):\r\n            idx = item_data[\"index\"]\r\n            image = self.image_storage.images[idx]\r\n            if image is None:\r\n                print(\"rotate_image: Оригинал отсутствует\")\r\n                return\r\n            rotated = np.rot90(image, k=-1)\r\n            self.image_storage.images[idx] = rotated\r\n            print(f\"rotate_image: Изображение {idx} повернуто\")\r\n            self.display_image(rotated)\r\n\r\n        elif item_data[\"type\"] == \"seeding\":\r\n            parent_idx = item_data[\"parent_index\"]\r\n            seed_idx = item_data[\"index\"]\r\n            obj = self.image_storage.class_object_image[parent_idx][seed_idx]\r\n            if not obj.image or obj.image[0] is None:\r\n                print(\"rotate_image: Crop пустой\")\r\n                return\r\n            crop = obj.image[0]\r\n            rotated = np.rot90(crop, k=-1)\r\n            self.image_storage.class_object_image[parent_idx][seed_idx].image[\r\n                0\r\n            ] = rotated\r\n            print(f\"rotate_image: Crop {seed_idx} (от оригинала {parent_idx}) повернут\")\r\n            self.display_image(rotated)\r\n        else:\r\n            print(\"rotate_image: Неизвестный тип данных\")\r\n            return\r\n\r\n    def create_mask(self):\r\n        print(\"Создание маски — пока не реализовано\")\r\n\r\n    def find_seedlings(self):\r\n        if self.image_storage.class_object_image is None:\r\n            self.image_storage.class_object_image = [\r\n                [] for _ in range(len(self.image_storage.images))\r\n            ]\r\n\r\n        print(\"find_seedlings: start\")\r\n        current_index = getattr(self, \"_active_image_index\", 0)\r\n        print(f\"find_seedlings: current_index = {current_index}\")\r\n\r\n        if not self.image_storage.images:\r\n            print(\"find_seedlings: Нет изображений для обработки\")\r\n            return\r\n\r\n        image = self.image_storage.images[current_index]\r\n        if image is None:\r\n            print(\"find_seedlings: Текущее изображение пустое\")\r\n            return\r\n\r\n        try:\r\n            results = self.model(image)\r\n            print(f\"find_seedlings: модель вернула {len(results[0].boxes)} боксов\")\r\n        except Exception as e:\r\n            print(f\"Ошибка при вызове модели: {e}\")\r\n            return\r\n\r\n        try:\r\n            # Здесь дальше по коду — NMS и обработка\r\n            # Пример простой NMS, как я писал ранее, чтобы избежать cv2.dnn.NMSBoxes\r\n            boxes = []\r\n            scores = []\r\n            class_boxes_data = []\r\n            for box in results[0].boxes:\r\n                class_id = int(box.cls)\r\n                class_name = results[0].names[class_id]\r\n                if class_name == \"Seeding\":\r\n                    score = float(box.conf)\r\n                    x_center, y_center, width, height = box.xywh[0].cpu().numpy()\r\n                    x1 = int(x_center - width / 2)\r\n                    y1 = int(y_center - height / 2)\r\n                    x2 = int(x_center + width / 2)\r\n                    y2 = int(y_center + height / 2)\r\n\r\n                    h, w = image.shape[:2]\r\n                    x1, x2 = max(0, x1), min(x2, w)\r\n                    y1, y2 = max(0, y1), min(y2, h)\r\n                    if x2 <= x1 or y2 <= y1:\r\n                        print(\r\n                            f\"find_seedlings: пропускаем некорректный bbox {x1, y1, x2, y2}\"\r\n                        )\r\n                        continue\r\n\r\n                    boxes.append([x1, y1, x2, y2])\r\n                    scores.append(score)\r\n                    class_boxes_data.append(\r\n                        {\r\n                            \"class_name\": class_name,\r\n                            \"score\": score,\r\n                            \"coords\": (x1, y1, x2, y2),\r\n                        }\r\n                    )\r\n\r\n            print(f\"find_seedlings: найдено {len(boxes)} боксов, запускаем NMS\")\r\n            indices = simple_nms(boxes, scores, iou_threshold=0.4)\r\n            print(f\"find_seedlings: после NMS осталось {len(indices)} боксов\")\r\n\r\n            # Добавляем в dataclass и дерево\r\n            self.image_storage.class_object_image[current_index] = []\r\n            parent_item = self.tree_widget.topLevelItem(current_index)\r\n            for i_out, i in enumerate(indices):\r\n                data = class_boxes_data[i]\r\n                x1, y1, x2, y2 = data[\"coords\"]\r\n                crop = image[y1:y2, x1:x2].copy()\r\n                obj = ObjectImage(\r\n                    class_name=data[\"class_name\"],\r\n                    confidence=data[\"score\"],\r\n                    image=[crop],\r\n                    bbox=(x1, y1, x2, y2),\r\n                )\r\n                self.image_storage.class_object_image[current_index].append(obj)\r\n                self.tree_widget.add_child_item(\r\n                    parent_item,\r\n                    f\"Seeding{i_out + 1}\",  # вместо \"Сеянец {i_out + 1}\"\r\n                    f\"Уверенность: {data['score']:.2f}\",\r\n                    current_index,\r\n                    i_out,\r\n                    \"seeding\",\r\n                    crop,\r\n                )\r\n\r\n            print(\"find_seedlings: завершено\")\r\n\r\n        except Exception as e:\r\n            print(f\"Ошибка во время NMS или обработки результатов: {e}\")\r\n            return\r\n\r\n    def find_all_seedlings(self):\r\n        \"\"\"\r\n        Находит сеянцы на всех изображениях (или страницах PDF).\r\n        \"\"\"\r\n        if not self.image_storage.images:\r\n            print(\"find_all_seedlings: Нет изображений\")\r\n            return\r\n\r\n        for idx, image in enumerate(self.image_storage.images):\r\n            self._active_image_index = (\r\n                idx  # чтобы всё работало так же, как для find_seedlings\r\n            )\r\n            self.find_seedlings()\r\n        print(\"find_all_seedlings: завершено\")\r\n\r\n    def display_image_with_boxes(self, idx):\r\n        image = self.image_storage.images[idx].copy()\r\n        if (\r\n            self.image_storage.class_object_image\r\n            and len(self.image_storage.class_object_image) > idx\r\n        ):\r\n            for i, obj in enumerate(\r\n                self.image_storage.class_object_image[idx], start=1\r\n            ):\r\n                if obj.bbox:\r\n                    x1, y1, x2, y2 = obj.bbox\r\n                    cv2.rectangle(\r\n                        image, (x1, y1), (x2, y2), color=(0, 255, 0), thickness=2\r\n                    )\r\n                    cv2.putText(\r\n                        image,\r\n                        f\"{i}\",  # Нумерация\r\n                        (x1, y1 - 5),\r\n                        cv2.FONT_HERSHEY_SIMPLEX,\r\n                        0.8,\r\n                        (0, 255, 0),\r\n                        2,\r\n                    )\r\n        self.display_image(image)\r\n\r\n    def classify(self):\r\n        print(\"Классификация — пока не реализовано\")\r\n\r\n    def create_report(self):\r\n        print(\"Создание отчёта — пока не реализовано\")\r\n
===================================================================
diff --git a/seeding/ui_main.py b/seeding/ui_main.py
--- a/seeding/ui_main.py	(revision 7dc6d685b507d7cdf8f9ececb198b5c783c249d5)
+++ b/seeding/ui_main.py	(date 1752740065076)
@@ -13,8 +13,8 @@
 )
 from PyQt5.QtGui import QIcon, QPixmap, QImage
 from PyQt5.QtCore import Qt, QPoint
-from .models.data_models import OriginalImage, ObjectImage
-from .tree_widget_example import TreeWidgetExample
+from models.data_models import OriginalImage, ObjectImage
+from tree_widget_example import TreeWidgetExample
 import numpy as np
 import cv2
 import fitz
